# utils/pdf_generator.py
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.units import cm
import io
import os
import datetime

def generate_conversation_pdf(conversation, user_info, bot_name="AI Bot"):
    """
    Generuje plik PDF z historiÄ… konwersacji
    
    Args:
        conversation (list): Lista wiadomoÅ›ci z konwersacji
        user_info (dict): Informacje o uÅ¼ytkowniku
        bot_name (str): Nazwa bota
        
    Returns:
        BytesIO: Bufor zawierajÄ…cy wygenerowany plik PDF
    """
    buffer = io.BytesIO()
    
    # Konfiguracja dokumentu
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=2*cm,
        leftMargin=2*cm,
        topMargin=2*cm,
        bottomMargin=2*cm
    )
    
    # Style
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(
        name='UserMessage',
        parent=styles['Normal'],
        fontName='Helvetica-Bold',
        spaceAfter=6
    ))
    styles.add(ParagraphStyle(
        name='BotMessage',
        parent=styles['Normal'],
        fontName='Helvetica',
        leftIndent=20,
        spaceAfter=12
    ))
    
    # Elementy dokumentu
    elements = []
    
    # NagÅ‚Ã³wek
    title = f"Konwersacja z {bot_name}"
    elements.append(Paragraph(title, styles['Title']))
    
    # Metadane
    current_time = datetime.datetime.now().strftime("%d-%m-%Y %H:%M")
    metadata_text = f"Eksportowano: {current_time}"
    if user_info.get('username'):
        metadata_text += f"<br/>UÅ¼ytkownik: {user_info.get('username')}"
    elements.append(Paragraph(metadata_text, styles['Italic']))
    elements.append(Spacer(1, 0.5*cm))
    
    # TreÅ›Ä‡ konwersacji
    for msg in conversation:
        if msg['is_from_user']:
            icon = "ðŸ‘¤ "  # Ikona uÅ¼ytkownika
            style = styles['UserMessage']
            content = f"{icon}Ty: {msg['content']}"
        else:
            icon = "ðŸ¤– "  # Ikona bota
            style = styles['BotMessage']
            content = f"{icon}{bot_name}: {msg['content']}"
        
        # Dodaj datÄ™ i godzinÄ™ wiadomoÅ›ci, jeÅ›li sÄ… dostÄ™pne
        if 'created_at' in msg and msg['created_at']:
            try:
                # Konwersja formatu daty
                if isinstance(msg['created_at'], str) and 'T' in msg['created_at']:
                    dt = datetime.datetime.fromisoformat(msg['created_at'].replace('Z', '+00:00'))
                    time_str = dt.strftime("%d-%m-%Y %H:%M")
                    content += f"<br/><font size=8 color=gray>{time_str}</font>"
            except Exception as e:
                # Ignoruj bÅ‚Ä™dy konwersji daty
                pass
                
        elements.append(Paragraph(content, style))
    
    # Stopka
    elements.append(Spacer(1, 1*cm))
    footer_text = f"Wygenerowano przez {bot_name} â€¢ {current_time}"
    elements.append(Paragraph(footer_text, styles['Italic']))
    
    # Wygeneruj dokument
    doc.build(elements)
    
    # Zresetuj pozycjÄ™ w buforze i zwrÃ³Ä‡ go
    buffer.seek(0)
    return buffer